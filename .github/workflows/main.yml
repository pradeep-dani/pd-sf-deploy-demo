name: Salesforce Manifest Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment (please populate respective values in .github/workflows/input.json)'
        required: true
        type: choice
        options:
          - STAGING
          - FULL
          - PROD

jobs:
  DEPLOY_PROCESS:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }} # Or Staging, etc., if you use GitHub Environments for stricter control

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }} # Checkout the specified branch
      
      - name: Read and parse JSON
        id: parse
        run: |
          content=$(cat .github/config/input.json)
          env_key="${{ github.event.inputs.environment }}"
          echo "manifest=$(echo "$content" | jq -r --arg env "$env_key" '.[$env].manifest')" >> $GITHUB_OUTPUT
          echo "test_classes=$(echo "$content" | jq -r --arg env "$env_key" '.[$env].test_classes')" >> $GITHUB_OUTPUT
          echo "is_validate=$(echo "$content" | jq -r --arg env "$env_key" '.[$env].is_validate')" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Recommended Node.js version for sf CLI

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

      - name: Cache Salesforce CLI (npm modules and binaries)
        uses: actions/cache@v4
        id: cache-sf-cli
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Salesforce CLI (always)
        run: |
          npm install --global @salesforce/cli
          echo "$(npm config get prefix)/bin" >> $GITHUB_PATH

      - name: Create JWT private key file
        run: |
          echo "${{ secrets.SFDX_JWT_KEY }}" > server.key
          chmod 600 server.key # Set restrictive permissions for security

      - name: Authenticate with Salesforce using JWT
        run: |
          sf org login jwt \
            --client-id ${{ secrets.SFDX_CLIENT_ID }} \
            --jwt-key-file server.key \
            --username ${{ secrets.SFDX_USERNAME }} \
            --instance-url ${{ secrets.SFDX_INSTANCE_URL }} \
            --alias env-${{ github.event.inputs.environment  }} 
        env:
          # You can optionally define secrets as environment variables here as well
          # SF_LOG_LEVEL: debug # For more verbose sf CLI output during auth
          SF_AUTOUPDATE_DISABLE: 'true' # Prevent sf CLI from trying to self-update during workflow

      - name: Deploy Salesforce project using manifest
        run: |
          if [ "${{ steps.parse.outputs.is_validate }}" = "true" ]; then            
            sf project deploy validate \
              --manifest ${{ steps.parse.outputs.manifest }} \
              --target-org env-${{ github.event.inputs.environment }} \
              --test-level RunSpecifiedTests ${{ steps.parse.outputs.test_classes }} \
              --verbose 
          else
            sf project deploy start \
              --manifest ${{ steps.parse.outputs.manifest }} \
              --target-org env-${{ github.event.inputs.environment }} \
              --test-level RunSpecifiedTests ${{ steps.parse.outputs.test_classes }} \
              --verbose 
          fi

      - name: Clean up private key file
        run: |
          if [ -f server.key ]; then
            rm server.key # Ensure this runs even if previous steps fail for security
            echo "üîê server.key removed"
          else
            echo "‚ÑπÔ∏è server.key not found, skipping"
          fi
 