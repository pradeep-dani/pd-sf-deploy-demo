name: STAGING - Manual Salesforce Manifest Deployment

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'The branch to checkout and deploy from (e.g., releases/v1.0.0, feature/my-new-feature)'
        required: true
        default: 'main' # Or your default development branch
      # environment:
      #   description: 'Select the deployment environment'
      #   required: true
      #   type: choice
      #   options:
      #   - STAGING
      #   - FULL
      #   - PROD

jobs:
  deploy_salesforce_project:
    runs-on: ubuntu-latest
    environment: STAGING # Or Staging, etc., if you use GitHub Environments for stricter control

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch_name }} # Checkout the specified branch
      
      - name: Read JSON file
        id: read_json
        run: |
          content=$(cat .github/config/input.json)
          echo "JSON_CONTENT=$content" >> $GITHUB_ENV
  	  
      - name: Parse JSON and set variables
        id: parse
        run: |
            echo "environment=$(echo $JSON_CONTENT | jq -r '.environment')" >> $GITHUB_OUTPUT
            echo "manifest=$(echo $JSON_CONTENT | jq -r '.manifest')" >> $GITHUB_OUTPUT
            echo "test_classes=$(echo $JSON_CONTENT | jq -r '.test_classes')" >> $GITHUB_OUTPUT
            echo "is_validate=$(echo $JSON_CONTENT | jq -r '.is_validate')" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Recommended Node.js version for sf CLI

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

      - name: Cache Salesforce CLI (npm modules and binaries)
        uses: actions/cache@v4
        id: cache-sf-cli
        with:
          path: |
            ${{ steps.npm-cache-dir.outputs.dir }}
            ~/.local/share/sf # Common install location for sf CLI
            ~/.npm
          key: ${{ runner.os }}-sf-cli-${{ hashFiles('**/package-lock.json', '.github/workflows/manual-salesforce-manifest-deployment.yml') }}
          restore-keys: |
            ${{ runner.os }}-sf-cli-

      - name: Install Salesforce CLI
        if: steps.cache-sf-cli.outputs.cache-hit != 'true'
        run: npm install @salesforce/cli --global

      - name: Add sf CLI to PATH
        run: |
          echo "$(npm config get prefix)/bin" >> $GITHUB_PATH
          echo "~/.local/share/sf/bin" >> $GITHUB_PATH # Ensure this path is added
          sf --version # Verify installation and path

      - name: Create JWT private key file
        run: |
          echo "${{ secrets.SFDX_JWT_KEY }}" > server.key
          chmod 600 server.key # Set restrictive permissions for security

      - name: Authenticate with Salesforce using JWT
        run: |
          sf org login jwt \
            --client-id ${{ secrets.SFDX_CLIENT_ID }} \
            --jwt-key-file server.key \
            --username ${{ secrets.SFDX_USERNAME }} \
            --instance-url ${{ secrets.SFDX_INSTANCE_URL }} \
            --alias env-${{ steps.parse.outputs.environment  }} 
        env:
          # You can optionally define secrets as environment variables here as well
          # SF_LOG_LEVEL: debug # For more verbose sf CLI output during auth
          SF_AUTOUPDATE_DISABLE: 'true' # Prevent sf CLI from trying to self-update during workflow

      - name: Deploy Salesforce project using manifest
        run: |
          sf project deploy start \
            --manifest ${{ steps.parse.outputs.manifest }} \
            --target-org env-${{ steps.parse.outputs.environment }} \
            --test-level RunSpecifiedTests ${{ steps.parse.outputs.test_classes }} \
            --verbose 

      - name: Clean up private key file
        run: rm server.key
        if: always() # Ensure this runs even if previous steps fail for security